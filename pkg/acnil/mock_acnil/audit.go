// Code generated by MockGen. DO NOT EDIT.
// Source: audit.go
//
// Generated by this command:
//
//	mockgen -source=audit.go -destination mock_acnil/audit.go
//
// Package mock_acnil is a generated GoMock package.
package mock_acnil

import (
	context "context"
	reflect "reflect"

	acnil "github.com/acnil/acnil-bot/pkg/acnil"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditDatabase is a mock of AuditDatabase interface.
type MockAuditDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockAuditDatabaseMockRecorder
}

// MockAuditDatabaseMockRecorder is the mock recorder for MockAuditDatabase.
type MockAuditDatabaseMockRecorder struct {
	mock *MockAuditDatabase
}

// NewMockAuditDatabase creates a new mock instance.
func NewMockAuditDatabase(ctrl *gomock.Controller) *MockAuditDatabase {
	mock := &MockAuditDatabase{ctrl: ctrl}
	mock.recorder = &MockAuditDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditDatabase) EXPECT() *MockAuditDatabaseMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockAuditDatabase) Append(ctx context.Context, entries []acnil.AuditEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockAuditDatabaseMockRecorder) Append(ctx, entries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockAuditDatabase)(nil).Append), ctx, entries)
}

// List mocks base method.
func (m *MockAuditDatabase) List(ctx context.Context) ([]acnil.AuditEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]acnil.AuditEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAuditDatabaseMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAuditDatabase)(nil).List), ctx)
}

// MockROGameDatabase is a mock of ROGameDatabase interface.
type MockROGameDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockROGameDatabaseMockRecorder
}

// MockROGameDatabaseMockRecorder is the mock recorder for MockROGameDatabase.
type MockROGameDatabaseMockRecorder struct {
	mock *MockROGameDatabase
}

// NewMockROGameDatabase creates a new mock instance.
func NewMockROGameDatabase(ctrl *gomock.Controller) *MockROGameDatabase {
	mock := &MockROGameDatabase{ctrl: ctrl}
	mock.recorder = &MockROGameDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockROGameDatabase) EXPECT() *MockROGameDatabaseMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockROGameDatabase) List(ctx context.Context) ([]acnil.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]acnil.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockROGameDatabaseMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockROGameDatabase)(nil).List), ctx)
}
