// Code generated by MockGen. DO NOT EDIT.
// Source: audit_query.go
//
// Generated by this command:
//
//	mockgen -source=audit_query.go -destination mock_acnil/audit_query.go
//
// Package mock_acnil is a generated GoMock package.
package mock_acnil

import (
	context "context"
	reflect "reflect"

	acnil "github.com/metalblueberry/acnil-bot/pkg/acnil"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditDatabaseRO is a mock of AuditDatabaseRO interface.
type MockAuditDatabaseRO struct {
	ctrl     *gomock.Controller
	recorder *MockAuditDatabaseROMockRecorder
}

// MockAuditDatabaseROMockRecorder is the mock recorder for MockAuditDatabaseRO.
type MockAuditDatabaseROMockRecorder struct {
	mock *MockAuditDatabaseRO
}

// NewMockAuditDatabaseRO creates a new mock instance.
func NewMockAuditDatabaseRO(ctrl *gomock.Controller) *MockAuditDatabaseRO {
	mock := &MockAuditDatabaseRO{ctrl: ctrl}
	mock.recorder = &MockAuditDatabaseROMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditDatabaseRO) EXPECT() *MockAuditDatabaseROMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockAuditDatabaseRO) List(ctx context.Context) ([]acnil.AuditEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]acnil.AuditEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAuditDatabaseROMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAuditDatabaseRO)(nil).List), ctx)
}
